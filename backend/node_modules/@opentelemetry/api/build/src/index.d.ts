export { BaggageEntry, BaggageEntryMetadata, Baggage } from '@opentelemetry/api/build/src/baggage/types';
export { baggageEntryMetadataFromString } from '@opentelemetry/api/build/src/baggage/utils';
export { Exception } from '@opentelemetry/api/build/src/common/Exception';
export { HrTime, TimeInput } from '@opentelemetry/api/build/src/common/Time';
export { Attributes, AttributeValue } from '@opentelemetry/api/build/src/common/Attributes';
export { createContextKey, ROOT_CONTEXT } from '@opentelemetry/api/build/src/context/context';
export { Context, ContextManager } from '@opentelemetry/api/build/src/context/types';
export type { ContextAPI } from '@opentelemetry/api/build/src/api/context';
export { DiagConsoleLogger } from '@opentelemetry/api/build/src/diag/consoleLogger';
export { DiagLogFunction, DiagLogger, DiagLogLevel, ComponentLoggerOptions, DiagLoggerOptions, } from '@opentelemetry/api/build/src/diag/types';
export type { DiagAPI } from '@opentelemetry/api/build/src/api/diag';
export { createNoopMeter } from '@opentelemetry/api/build/src/metrics/NoopMeter';
export { MeterOptions, Meter } from '@opentelemetry/api/build/src/metrics/Meter';
export { MeterProvider } from '@opentelemetry/api/build/src/metrics/MeterProvider';
export { ValueType, Counter, Gauge, Histogram, MetricOptions, Observable, ObservableCounter, ObservableGauge, ObservableUpDownCounter, UpDownCounter, BatchObservableCallback, MetricAdvice, MetricAttributes, MetricAttributeValue, ObservableCallback, } from '@opentelemetry/api/build/src/metrics/Metric';
export { BatchObservableResult, ObservableResult, } from '@opentelemetry/api/build/src/metrics/ObservableResult';
export type { MetricsAPI } from '@opentelemetry/api/build/src/api/metrics';
export { TextMapPropagator, TextMapSetter, TextMapGetter, defaultTextMapGetter, defaultTextMapSetter, } from '@opentelemetry/api/build/src/propagation/TextMapPropagator';
export type { PropagationAPI } from '@opentelemetry/api/build/src/api/propagation';
export { SpanAttributes, SpanAttributeValue } from '@opentelemetry/api/build/src/trace/attributes';
export { Link } from '@opentelemetry/api/build/src/trace/link';
export { ProxyTracer, TracerDelegator } from '@opentelemetry/api/build/src/trace/ProxyTracer';
export { ProxyTracerProvider } from '@opentelemetry/api/build/src/trace/ProxyTracerProvider';
export { Sampler } from '@opentelemetry/api/build/src/trace/Sampler';
export { SamplingDecision, SamplingResult } from '@opentelemetry/api/build/src/trace/SamplingResult';
export { SpanContext } from '@opentelemetry/api/build/src/trace/span_context';
export { SpanKind } from '@opentelemetry/api/build/src/trace/span_kind';
export { Span } from '@opentelemetry/api/build/src/trace/span';
export { SpanOptions } from '@opentelemetry/api/build/src/trace/SpanOptions';
export { SpanStatus, SpanStatusCode } from '@opentelemetry/api/build/src/trace/status';
export { TraceFlags } from '@opentelemetry/api/build/src/trace/trace_flags';
export { TraceState } from '@opentelemetry/api/build/src/trace/trace_state';
export { createTraceState } from '@opentelemetry/api/build/src/trace/internal/utils';
export { TracerProvider } from '@opentelemetry/api/build/src/trace/tracer_provider';
export { Tracer } from '@opentelemetry/api/build/src/trace/tracer';
export { TracerOptions } from '@opentelemetry/api/build/src/trace/tracer_options';
export { isSpanContextValid, isValidTraceId, isValidSpanId, } from '@opentelemetry/api/build/src/trace/spancontext-utils';
export { INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT, } from '@opentelemetry/api/build/src/trace/invalid-span-constants';
export type { TraceAPI } from '@opentelemetry/api/build/src/api/trace';
import { context } from '@opentelemetry/api/build/src/context-api';
import { diag } from '@opentelemetry/api/build/src/diag-api';
import { metrics } from '@opentelemetry/api/build/src/metrics-api';
import { propagation } from '@opentelemetry/api/build/src/propagation-api';
import { trace } from '@opentelemetry/api/build/src/trace-api';
export { context, diag, metrics, propagation, trace };
declare const _default: {
    context: import("@opentelemetry/api/build/src/api/context").ContextAPI;
    diag: import("@opentelemetry/api/build/src/api/diag").DiagAPI;
    metrics: import("@opentelemetry/api/build/src/api/metrics").MetricsAPI;
    propagation: import("@opentelemetry/api/build/src/api/propagation").PropagationAPI;
    trace: import("@opentelemetry/api/build/src/api/trace").TraceAPI;
};
export default _default;
//# sourceMappingURL=index.d.ts.map